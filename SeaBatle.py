import random as ran # –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏

class GameException(Exception):
    "–ö–ª–∞—Å—Å –∏—Å–∫–ª—é—á–µ–Ω–∏–π(—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª—ã)"
    pass


class MissBoardException(GameException):
    "–í—ã—Å—Ç—Ä–µ–ª—ã –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—è"
    def __str__(self):
        return "–í—ã —Å—Ç—Ä–µ–ª—è–µ—Ç–µ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è!"


class RepeatShotException(GameException):
    "–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª—ã"
    def __str__(self):
        return "–°—é–¥–∞ —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏!!!"


class WrongPlacedShipException(GameException):
    "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è"
    pass

class Points:
    "–ö–ª–∞—Å—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º"
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y

    def __repr__(self):
        return f"({self.x}, {self.y})"





class Ship:
    "–ö–ª–∞—Å—Å –∫–æ—Ä–∞–±–ª–µ–π —Å –¥–ª–∏–Ω–Ω–æ–π –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Å–ø–∏—Å–æ–∫"
    def __init__(self, bow, len, orient):
        self.bow = bow
        self.len = len
        self.orient = orient
        self.lives = len

    @property
    def points(self):
        ship_points = []
        for i in range(self.len):
            current_x = self.bow.x
            current_y = self.bow.y

            if self.orient == 0:
                current_x += i

            elif self.orient == 1:
                current_y += i

            ship_points.append(Points(current_x, current_y))

        return ship_points

    def shoots(self, shot):
        return shot in self.points


class Board:
    "–ö–ª–∞—Å—Å –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏ —Å –º–µ—Ç–æ–¥–∞–º–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª–µ–π, –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –ø–æ–ª—è, –≤—ã—Å—Ç—Ä–µ–ª–æ–≤, –ø–æ–ø–∞–¥–∞–Ω–∏–π. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è)"
    def __init__(self, hid=False, size=6):
        self.size = size
        self.hid = hid

        self.count = 0

        self.field = [["O"] * size for _ in range(size)]

        self.busy = []
        self.ships = []

    def add_ship(self, ship):

        for d in ship.points:
            if self.out(d) or d in self.busy:
                raise WrongPlacedShipException()
        for d in ship.points:
            self.field[d.x][d.y] = "‚ñ†"
            self.busy.append(d)

        self.ships.append(ship)
        self.contour(ship)

    def contour(self, ship, verb=False):
        near = [
            (-1, -1), (-1, 0), (-1, 1),
            (0, -1), (0, 0), (0, 1),
            (1, -1), (1, 0), (1, 1)
        ]
        for d in ship.points:
            for dx, dy in near:
                cur = Points(d.x + dx, d.y + dy)
                if not (self.out(cur)) and cur not in self.busy:
                    if verb:
                        self.field[cur.x][cur.y] = "."
                    self.busy.append(cur)

    def __str__(self):
        res = ""
        res += "   1  2  3  4  5  6 "
        for i, row in enumerate(self.field):
            res += f"\n{i + 1}  " + "  ".join(row) + " "

        if self.hid:
            res = res.replace("‚ñ†", "O")
        return res

    def out(self, d):
        return not ((0 <= d.x < self.size) and (0 <= d.y < self.size))

    def shot(self, d):
        if self.out(d):
            raise MissBoardException()

        if d in self.busy:
            raise RepeatShotException()

        self.busy.append(d)

        for ship in self.ships:
            if d in ship.points:
                ship.lives -= 1
                self.field[d.x][d.y] = "X"
                if ship.lives == 0:
                    self.count += 1
                    self.contour(ship)
                    print("–ü–æ—Ç–æ–ø–∏–ª!!!")
                    return False
                else:
                    print("–ü–æ–ø–∞–¥–∞–Ω–∏–µ!")
                    return True

        self.field[d.x][d.y] = "."
        print("–ú–∏–º–æ! üòù")
        return False

    def begin(self):
        self.busy = []


class Player:
    "–ö–ª–∞—Å—Å –ò–≥—Ä–æ–∫–æ–≤"
    def __init__(self, board, enemy):
        self.board = board
        self.enemy = enemy

    def ask(self):
        raise NotImplementedError()

    def move(self):
        while True:
            try:
                target = self.ask()
                repeat = self.enemy.shot(target)
                return repeat
            except GameException as e:
                print(e)


class II(Player):
    "–î–æ—á–µ—Ä–Ω–∏–π –æ—Ç –∫–ª–∞—Å—Å–∞ –∏–≥—Ä–∞–∫–æ–≤ –∫–ª–∞—Å—Å –ò–ò —Å –º–µ—Ç–æ–¥–æ–º —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —Ö–æ–¥–∞"
    def ask(self):
        d = Points(ran.randint(0, 5), ran.randint(0, 5))
        print(f"–•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: {d.x + 1} {d.y + 1}")
        return d


class User(Player):
    "–î–æ—á–µ—Ä–Ω–∏–π –æ—Ç –∫–ª–∞—Å—Å–∞ –∏–≥—Ä–∞–∫–æ–≤ –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–µ—Ç–æ–¥–æ–º –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤—ã—Å—Ç—Ä–µ–ª–∞"
    def ask(self):
        while True:
            cords = input("–°—Ç—Ä–µ–ª—è–π—Ç–µ: ").split()

            if len(cords) != 2:
                print(" –í–≤–µ–¥–∏—Ç–µ 2 –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã! ")
                continue

            x, y = cords

            if not (x.isdigit()) or not (y.isdigit()):
                print(" –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞! ")
                continue

            x, y = int(x), int(y)

            return Points(x - 1, y - 1)


class Game:
    "–ö–ª–∞—Å—Å –ò–≥—Ä—ã —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–≥—Ä–æ–≤—ã—Ö –ø–æ–ª–µ–π, —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º, —Å —Ü–∏–∫–ª–æ–º —Ö–æ–¥–æ–≤"
    def __init__(self, size=6):
        self.size = size
        pl = self.random_board()
        co = self.random_board()
        co.hid = True

        self.ii = II(co, pl)
        self.us = User(pl, co)

    def random_board(self):
        board = None
        while board is None:
            board = self.random_place()
        return board

    def random_place(self):
        lens = [3, 2, 2, 1, 1, 1, 1]
        board = Board(size=self.size)
        attempts = 0
        for l in lens:
            while True:
                attempts += 1
                if attempts > 2000:
                    return None
                ship = Ship(Points(ran.randint(0, 6), ran.randint(0, 6)), l, ran.randint(0, 1))
                try:
                    board.add_ship(ship)
                    break
                except WrongPlacedShipException:
                    pass
        board.begin()
        return board

    def welkom(self):
        "–ö–ª–∞—Å—Å –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
        print(" –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É! \n –î–ª—è –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤—ã—Å—Ç—Ä–µ–ª–∞ \n –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, \n "
              "–∞ –∑–∞—Ç–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter!")


    def cicle(self):
        num = 0
        while True:
            print("-" * 20)
            print("–î–æ—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            print(self.us.board)
            print("-" * 20)
            print("–î–æ—Å–∫–∞ –ò–ò:")
            print(self.ii.board)
            if num % 2 == 0:
                print("-" * 20)
                print("–•–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!")
                repeat = self.us.move()
            else:
                print("-" * 20)
                print("–•–æ–¥–∏—Ç –ò–ò!")
                repeat = self.ii.move()
            if repeat:
                num -= 1

            if self.ii.board.count == 7:
                print("-" * 20)
                print("–£–†–ê! –ü–æ–±–µ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                break

            if self.us.board.count == 7:
                print("-" * 20)
                print("–ò–ò –û–∫–∞–∑–∞–ª—Å—è –°–∏–ª—å–Ω–µ–π!")
                break
            num += 1

    def start(self):
        self.welkom()
        self.cicle()


g = Game()
g.start()

